# ##############################
# @proto: train_val.prototxt
# @author: ddk
# @method: heat map
# @time: 15.11.19
# ##############################
name: "HumanPoseEstimation"

layer {
  name: "data"
  type: "RandomImageData2"
  top: "data"
  top: "gt_pose_coords"
  top: "aux_info"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    # opencv: B, G, R
  }
  random_image_data2_param {
    batch_size: 6
    source: "../dataset/FLIC/labels/crop_train_labels2.txt"
    root_folder: "../dataset/FLIC/crop.images2/train/"
    parts_orders_path: "../dataset/FLIC/labels/parts_orders_path.txt"
    shuffle: true
    is_color: true
    is_scale_image: true
    always_max_size: true
    max_size: 256
    min_size: 240
    label_num: 28
    img_ext: ".jpg"
    # receptive_field_size: 100
    # visual_images_path: "m_256_c/"
    # visual_path: "../asserts/models/Pose/FLIC/ldp2/lecun-8x-3b-addc4_2-sd5_5-marks_1_refine/visual_data/train/"
    # skel_points_path: "../dataset/FLIC/labels/skel_path.txt"
  }
}

layer {
  name: "data"
  type: "RandomImageData2"
  top: "data"
  top: "gt_pose_coords"
  top: "aux_info"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    # opencv: B, G, R
  }
  random_image_data2_param {
    batch_size: 8
    source: "../dataset/FLIC/labels/crop_test_labels2.txt"
    root_folder: "../dataset/FLIC/crop.images2/test/"
    parts_orders_path: "../dataset/FLIC/labels/parts_orders_path.txt"
    shuffle: false
    is_color: true
    is_scale_image: true
    always_max_size: true
    max_size: 256
    min_size: 240
    label_num: 28
    img_ext: ".jpg"
    # receptive_field_size: 100
    # visual_images_path: "nm_256_c/"
    # visual_path: "../asserts/models/Pose/FLIC/ldp2/lecun-8x-3b-addc4_2-sd5_5-marks_1_refine/visual_data/test/"
    # skel_points_path: "../dataset/FLIC/labels/skel_path.txt"
  }
}
layer {
  name: "data_masks"
  type: "CoordsToBboxesMasks"
  bottom: "gt_pose_coords"
  bottom: "aux_info"
  top: "data_masks"
  coord_to_bbox_masks_param {
    # lsho: 3, rsho: 6, lhip: 10, rhip: 11 
    # top_id/bottom_id: (lsho,rhip)
    # top_id2/bottom_id2: (rsho,lhip)
    top_id: 6
    bottom_id: 10
    top_id2: 6
    bottom_id2: 10
    value: 255
    # visual_path: "../asserts/models/Pose/FLIC/ldp2/lecun-8x-3b-addc4_2-sd5_5-marks_1_refine/data_masks/"
    # img_ext: ".jpg"
  }
}

layer {
  name: "concat_data"
  type: "Concat"
  bottom: "data"
  bottom: "data_masks"
  top: "data_bank1"
  concat_param {
    concat_dim: 1
  }
}
layer {
  name: "data_bank2"
  type: "Resize"
  bottom: "data_bank1"
  top: "data_bank2"
  resize_param {
    height_fac: 0.5
    width_fac: 0.5
  }
}
layer {
  name: "data_bank3"
  type: "Resize"
  bottom: "data_bank1"
  top: "data_bank3"
  resize_param {
    height_fac: 0.707
    width_fac: 0.707
  }
}

layer {
  name: "heat_maps_from_coords"
  type: "HeatMapsFromCoordsOrigin"
  bottom: "gt_pose_coords"
  bottom: "aux_info"
  top: "heat_maps"
  top: "heat_maps_masks"
  top: "heat_maps_infos"
  heat_maps_from_coords_origin_param {
    is_binary: true
    # 决定了heat map的pixels不为0的区域(菱形)的边长
    # radius: 10
    # radius_str: "2,2,2,6,6,4,6,6,4,6,6,6,6,6"
    radius_str: "3,3,3,8,8,6,8,8,6,8,8,8,8,8"
    gau_mean: 0
    gau_stds: 1.5
  }
}

# ########################
# conv & relu & lrn & pool
# brand 1
layer {
  name: "conv1_bank1"
  type: "Convolution"
  bottom: "data_bank1"
  top: "conv1_bank1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_bank1"
  type: "ReLU"
  bottom: "conv1_bank1"
  top: "conv1_bank1"
}
layer {
  name: "pool1_bank1"
  type: "Pooling"
  bottom: "conv1_bank1"
  top: "pool1_bank1"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# #######################

layer {
  name: "conv2_bank1"
  type: "Convolution"
  bottom: "pool1_bank1"
  top: "conv2_bank1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu2_bank1"
  type: "ReLU"
  bottom: "conv2_bank1"
  top: "conv2_bank1"
}
layer {
  name: "pool2_bank1"
  type: "Pooling"
  bottom: "conv2_bank1"
  top: "pool2_bank1"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# #######################

layer {
  name: "conv3_bank1"
  type: "Convolution"
  bottom: "pool2_bank1"
  top: "conv3_bank1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_bank1"
  type: "ReLU"
  bottom: "conv3_bank1"
  top: "conv3_bank1"
}
layer {
  name: "pool3_bank1"
  type: "Pooling"
  bottom: "conv3_bank1"
  top: "pool3_bank1"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# ####################

layer {
  name: "conv4_1_bank1"
  type: "Convolution"
  bottom: "pool3_bank1"
  top: "conv4_1_bank1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu4_1_bank1"
  type: "ReLU"
  bottom: "conv4_1_bank1"
  top: "conv4_1_bank1"
}

layer {
  name: "conv4_2_bank1"
  type: "Convolution" 
  bottom: "conv4_1_bank1"
  top: "conv4_2_bank1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu4_2_bank1"
  type: "ReLU"
  bottom: "conv4_2_bank1"
  top: "conv4_2_bank1"
}

# ##########################
# conv & relu & lrn & pool
# brand 2
layer {
  name: "conv1_bank2"
  type: "Convolution"
  bottom: "data_bank2"
  top: "conv1_bank2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_bank2"
  type: "ReLU"
  bottom: "conv1_bank2"
  top: "conv1_bank2"
}
layer {
  name: "pool1_bank2"
  type: "Pooling"
  bottom: "conv1_bank2"
  top: "pool1_bank2"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# #######################

layer {
  name: "conv2_bank2"
  type: "Convolution"
  bottom: "pool1_bank2"
  top: "conv2_bank2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu2_bank2"
  type: "ReLU"
  bottom: "conv2_bank2"
  top: "conv2_bank2"
}
layer {
  name: "pool2_bank2"
  type: "Pooling"
  bottom: "conv2_bank2"
  top: "pool2_bank2"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# #######################

layer {
  name: "conv3_bank2"
  type: "Convolution"
  bottom: "pool2_bank2"
  top: "conv3_bank2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_bank2"
  type: "ReLU"
  bottom: "conv3_bank2"
  top: "conv3_bank2"
}
layer {
  name: "pool3_bank2"
  type: "Pooling"
  bottom: "conv3_bank2"
  top: "pool3_bank2"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# ####################

layer {
  name: "conv4_1_bank2"
  type: "Convolution"
  bottom: "pool3_bank2"
  top: "conv4_1_bank2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu4_1_bank2"
  type: "ReLU"
  bottom: "conv4_1_bank2"
  top: "conv4_1_bank2"
}

layer {
  name: "conv4_2_bank2"
  type: "Convolution"
  bottom: "conv4_1_bank2"
  top: "conv4_2_bank2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu4_2_bank2"
  type: "ReLU"
  bottom: "conv4_2_bank2"
  top: "conv4_2_bank2"
}
layer {
  name: "re_conv4_2_bank2"
  type: "Resize"
  bottom: "conv4_2_bank2"
  bottom: "conv4_2_bank1"
  top: "re_conv4_2_bank2"
}

# ##########################
# conv & relu & lrn & pool
# brand 3
layer {
  name: "conv1_bank3"
  type: "Convolution"
  bottom: "data_bank3"
  top: "conv1_bank3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_bank3"
  type: "ReLU"
  bottom: "conv1_bank3"
  top: "conv1_bank3"
}
layer {
  name: "pool1_bank3"
  type: "Pooling"
  bottom: "conv1_bank3"
  top: "pool1_bank3"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# #######################

layer {
  name: "conv2_bank3"
  type: "Convolution"
  bottom: "pool1_bank3"
  top: "conv2_bank3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu2_bank3"
  type: "ReLU"
  bottom: "conv2_bank3"
  top: "conv2_bank3"
}
layer {
  name: "pool2_bank3"
  type: "Pooling"
  bottom: "conv2_bank3"
  top: "pool2_bank3"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# #######################

layer {
  name: "conv3_bank3"
  type: "Convolution"
  bottom: "pool2_bank3"
  top: "conv3_bank3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_bank3"
  type: "ReLU"
  bottom: "conv3_bank3"
  top: "conv3_bank3"
}
layer {
  name: "pool3_bank3"
  type: "Pooling"
  bottom: "conv3_bank3"
  top: "pool3_bank3"
  pooling_param {
    pool: MAX
    stride: 2
    kernel_size: 2
  }
}

# ####################

layer {
  name: "conv4_1_bank3"
  type: "Convolution"
  bottom: "pool3_bank3"
  top: "conv4_1_bank3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu4_1_bank3"
  type: "ReLU"
  bottom: "conv4_1_bank3"
  top: "conv4_1_bank3"
}

layer {
  name: "conv4_2_bank3"
  type: "Convolution"
  bottom: "conv4_1_bank3"
  top: "conv4_2_bank3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu4_2_bank3"
  type: "ReLU"
  bottom: "conv4_2_bank3"
  top: "conv4_2_bank3"
}
layer {
  name: "re_conv4_2_bank3"
  type: "Resize"
  bottom: "conv4_2_bank3"
  bottom: "conv4_2_bank1"
  top: "re_conv4_2_bank3"
}

# ############
# merge banks
layer {
  name: "merge_banks"
  type: "Eltwise"
  bottom: "conv4_2_bank1"
  bottom: "re_conv4_2_bank2"
  bottom: "re_conv4_2_bank3"
  top: "conv4"
  eltwise_param {
    operation: SUM
  }
}
# Spatial Dropout Layer
layer {
  name: "spatial_drop"
  type: "SpatialDropout"
  bottom: "conv4"
  top: "conv4"
  spatial_dropout_param {
    dropout_ratio: 0.5
  }
}

# #####################

layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

# ####################

layer {
  name: "conv6"
  type: "Convolution"
  bottom: "conv5"
  top: "conv6"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv6"
  top: "conv6"
}

# ####################

layer {
  name: "conv7"
  type: "Convolution"
  bottom: "conv6"
  top: "conv7"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 14
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}

layer {
  name: "re_conv7"
  type: "Resize"
  bottom: "conv7"
  bottom: "heat_maps"
  top: "re_conv7"
}


# #####################################
#            Refined Model 
# #####################################

# #####################################
# Bank1: refined models -- only conv && relu
layer {
  name: "crop-data"
  type: "CropPatchFromMaxFeaturePosition"

  ## this is for getting mapping relationship
  bottom: "conv1_bank1"
  bottom: "re_conv7"

  bottom: "conv1_bank1"
  top: "crop_conv1_bank1"

  bottom: "heat_maps"
  top: "crop_heat_maps"

  crop_patch_from_max_feature_position_param {
    crop_factor: 0.3
    match_channel: false
    match_channel: true
  }
}

# #######################

layer {
  name: "crop_conv2_bank1"
  type: "Convolution"
  bottom: "crop_conv1_bank1"
  top: "crop_conv2_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 896
    pad: 2
    group: 14
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "crop_relu2_bank1"
  type: "ReLU"
  bottom: "crop_conv2_bank1"
  top: "crop_conv2_bank1"
}

# #######################

layer {
  name: "crop_conv3_bank1"
  type: "Convolution"
  bottom: "crop_conv2_bank1"
  top: "crop_conv3_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 896
    pad: 3
    group: 14
    kernel_size: 7
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "crop_relu3_bank1"
  type: "ReLU"
  bottom: "crop_conv3_bank1"
  top: "crop_conv3_bank1"
}

# ####################

layer {
  name: "crop_conv4_bank1"
  type: "Convolution"
  bottom: "crop_conv3_bank1"
  top: "crop_conv4_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1792
    pad: 4
    kernel_size: 9
    group: 14
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "crop_relu4_bank1"
  type: "ReLU"
  bottom: "crop_conv4_bank1"
  top: "crop_conv4_bank1"
}

# #####################################
# Bank2: refined models -- only conv && relu
layer {
  name: "crop-data"
  type: "CropPatchFromMaxFeaturePosition"

  ## this is for getting mapping relationship
  bottom: "conv1_bank2"
  bottom: "re_conv7"

  bottom: "conv1_bank2"
  top: "crop_conv1_bank2"

  bottom: "heat_maps"
  top: "crop_heat_maps"

  crop_patch_from_max_feature_position_param {
    crop_factor: 0.3
    match_channel: false
    match_channel: true
  }
}

# #######################

layer {
  name: "crop_conv2_bank2"
  type: "Convolution"
  bottom: "crop_conv1_bank2"
  top: "crop_conv2_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 896
    pad: 2
    group: 14
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "crop_relu2_bank2"
  type: "ReLU"
  bottom: "crop_conv2_bank2"
  top: "crop_conv2_bank2"
}

# #######################

layer {
  name: "crop_conv3_bank2"
  type: "Convolution"
  bottom: "crop_conv2_bank2"
  top: "crop_conv3_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 896
    pad: 3
    group: 14
    kernel_size: 7
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "crop_relu3_bank2"
  type: "ReLU"
  bottom: "crop_conv3_bank2"
  top: "crop_conv3_bank2"
}

# ####################

layer {
  name: "crop_conv4_bank2"
  type: "Convolution"
  bottom: "crop_conv3_bank2"
  top: "crop_conv4_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1792
    pad: 4
    kernel_size: 9
    group: 14
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "crop_relu4_bank2"
  type: "ReLU"
  bottom: "crop_conv4_bank2"
  top: "crop_conv4_bank2"
}

layer {
  name: "re_crop_conv4_bank2"
  type: "Resize"
  bottom: "crop_conv4_bank2"
  bottom: "crop_conv4_bank1"
  top: "re_crop_conv4_bank2"
}

# #####################################
# Bank3: refined models -- only conv && relu
layer {
  name: "crop-data"
  type: "CropPatchFromMaxFeaturePosition"

  ## this is for getting mapping relationship
  bottom: "conv1_bank3"
  bottom: "re_conv7"

  bottom: "conv1_bank3"
  top: "crop_conv1_bank3"

  bottom: "heat_maps"
  top: "crop_heat_maps"

  crop_patch_from_max_feature_position_param {
    crop_factor: 0.3
    match_channel: false
    match_channel: true
  }
}

# #######################

layer {
  name: "crop_conv2_bank3"
  type: "Convolution"
  bottom: "crop_conv1_bank3"
  top: "crop_conv2_bank3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 896
    pad: 2
    group: 14
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "crop_relu2_bank3"
  type: "ReLU"
  bottom: "crop_conv2_bank3"
  top: "crop_conv2_bank3"
}

# #######################

layer {
  name: "crop_conv3_bank3"
  type: "Convolution"
  bottom: "crop_conv2_bank3"
  top: "crop_conv3_bank3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 896
    pad: 3
    group: 14
    kernel_size: 7
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "crop_relu3_bank3"
  type: "ReLU"
  bottom: "crop_conv3_bank3"
  top: "crop_conv3_bank3"
}

# ####################

layer {
  name: "crop_conv4_bank3"
  type: "Convolution"
  bottom: "crop_conv3_bank3"
  top: "crop_conv4_bank3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1792
    pad: 4
    kernel_size: 9
    group: 14
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}
layer {
  name: "crop_relu4_bank3"
  type: "ReLU"
  bottom: "crop_conv4_bank3"
  top: "crop_conv4_bank3"
}

layer {
  name: "re_crop_conv4_bank3"
  type: "Resize"
  bottom: "crop_conv4_bank3"
  bottom: "crop_conv4_bank1"
  top: "re_crop_conv4_bank3"
}

# ############
# merge banks
layer {
  name: "merge_banks"
  type: "Eltwise"
  bottom: "conv4_2_bank1"
  bottom: "re_crop_conv4_bank2"
  bottom: "re_crop_conv4_bank3"
  top: "conv4"
  eltwise_param {
    operation: SUM
  }
}

# ####################

layer {
  name: "crop_conv5"
  type: "Convolution" 
  bottom: "crop_conv4_bank1"
  top: "crop_conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 14
    kernel_size: 1
    group: 14
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.
    }
  }
}

# ###########
# loss layer
layer {
  name: "pose_heap_map_loss"
  type: "PoseHeatMapLoss"
  bottom: "crop_conv5"
  bottom: "crop_heat_maps"
  bottom: "heat_maps_masks"
  top: "pose_heap_map_loss"
  include {
    phase: TRAIN
  }
  pose_heat_map_loss_param {
    # 0: normal
    # 1: only fg
    # 2: nornmal + fg_eof
    # 3: ratio between fg and bg
    # 4: ratio between fg and bg with fg_eof
    loss_emphase_type: 3
    fg_eof: 3
    bg_eof: 1
    # bg_num: 5
    ratio: 0.005
    # when loss continues to decrease, but accuracy does not keep increasing,
    # modify the prob_num to be smaller, e.g. 11 to 7
    prob_num: 11
    #hards_num_arr: "3,3,3,8,8,6,8,8,6,8,8,8,8,8"
    heat_score_thres: 0.273
    #heat_score_thres_arr: "3,3,3,8,8,6,8,8,6,8,8,8,8,8"
    parts_err_num_thres: 3
    hard_negative_filepath: "NotImplemented."
  }
}

# ########################
# visual & accuracy layer
layer {
  name: "resize_crop_heat_map"
  type: "ResizeWithMap"
  bottom: "crop_conv5"
  bottom: "data_bank1"

  bottom: "crop_conv5"
  top: "re_crop_conv5"

  include {
    phase: TEST
  }
}
layer {
  name: "mix_heat_map"
  type: "Eltwise"
  bottom: "re_conv7"
  bottom: "re_crop_conv5"
  top: "mix_heat_map"
  include {
    phase: TEST
  }
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "pred_coords_from_maps"
  type: "CoordsFromHeatMaps"
  bottom: "mix_heat_map"
  top: "pred_pose_coords"
  include {
    phase: TEST
  }
}
layer {
  name: "pred_rescale_pose_coords"
  type: "RescaledPoseCoords"
  bottom: "pred_pose_coords"
  bottom: "aux_info"
  top: "pred_pose_coords"
  include {
    phase: TEST
  }
}
layer {
  name: "gt_rescale_pose_coords"
  type: "RescaledPoseCoords"
  bottom: "gt_pose_coords"
  bottom: "aux_info"
  top: "gt_origin_pose_coords"
  include {
    phase: TEST
  }
}

layer {
  name: "visual_heat_maps2"
  type: "VisualizedHeatMaps2"
  bottom: "mix_heat_map"
  bottom: "heat_maps"
  bottom: "aux_info"
  include {
    phase: TEST
  }
  visual_heat_maps_param {
    # 0: files; 1: images, 2: both
    visual_type: 1
    heat_map_path: "../asserts/models/Pose/FLIC/ldp2/lecun-8x-3b-addc4_2-sd5_5-marks_1_refine/test_heat_maps2/"
    heat_map_files_name: "files/"
    heat_map_images_name: "images/"
    # if bottom.size() is 1, then only one phase_name
    # if bottom.size() is 3, then use three phase_name(s)
    # ohters, errors
    # phase_name: "test_predicted/"
    # phase_name: "test_ground_truths/"
    phase_name: "test_fusion/"
    threshold: 0.273
  }
}
layer {
  name: "visual_coords"
  type: "VisualizedPoseCoords"
  bottom: "pred_pose_coords"
  bottom: "gt_origin_pose_coords"
  bottom: "aux_info"
  include {
    phase: TEST
  }
  visual_pose_coords_param {
    coords_path: "../asserts/models/Pose/FLIC/ldp2/lecun-8x-3b-addc4_2-sd5_5-marks_1_refine/poses_coords/"
    skel_path: "../dataset/FLIC/labels/skel_path.txt"
    coords_files_name: "files/"
    coords_images_name: "images/"
    # if bottom.size() == 1, only one of them, either `train/test` or `train, test, fusion` 
    # if bottom.size() == 3, then phase_name_size must be 3
    # else phase_name_size must be 1
    phase_name: "test_prediction/"
    phase_name: "test_ground_truths/"
    phase_name: "test_fusion/"
    is_draw_text: true
  }
}
layer {
  name: "accuracy"
  type: "PosePDJAccuracy"
  bottom: "pred_pose_coords"
  bottom: "gt_origin_pose_coords"
  top: "accuracy"
  include {
    phase: TEST
  }
  pose_pdj_accuracy_param {
    acc_factor: 0.05
    acc_factor_num: 10
    images_num: 1016
    zero_iter_test: true
    acc_name: "pose_pdj_acc.log"
    log_name: "pose_pdj_log.log"
    acc_path: "../asserts/models/Pose/FLIC/ldp2/lecun-8x-3b-addc4_2-sd5_5-marks_1_refine/test_acc/"
    # 0: leye, 1: reye, 2: nose, 
    # 3: lsho, 4: lelb, 5: lwri, 
    # 6: rsho, 7: relb, 8: rwri, 
    # 9: neck(lsho, rsho), 12: waist(lhip, rhip)
    # 10: lhip, 11: rhip, 13: torso
    # here use (rsho, lhip)
    shoulder_id: 6
    hip_id: 10
  }
}