

#include <glog/logging.h>

#include <cstring>
#include <map>
#include <string>
#include <vector>
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <sstream>
#include "boost/algorithm/string.hpp"
#include "caffe/caffe.hpp"
#include "caffe/global_variables.hpp"
#include <queue>
#include <boost/thread.hpp>


// for solving the problem of 
// ctrl+c error
volatile int quit_signal=0;
#ifdef __unix__
#include <signal.h>
extern "C" void quit_signal_handler(int signum) {
 if (quit_signal!=0) exit(0); // just exit already
 quit_signal=1;
}
#endif


using caffe::Blob;
using caffe::Caffe;
using caffe::Net;
using caffe::Layer;
using caffe::shared_ptr;
using caffe::Timer;
using caffe::vector;


DEFINE_int32(gpu, -1,
    "Run in GPU mode on given device ID.");
DEFINE_string(solver, "",
    "The solver definition protocol buffer text file.");
DEFINE_string(model, "",
    "The model definition protocol buffer text file..");
DEFINE_string(snapshot, "",
    "Optional; the snapshot solver state to resume training.");
DEFINE_string(weights, "",
    "Optional; the pretrained weights to initialize finetuning. "
    "Cannot be set simultaneously with snapshot.");
DEFINE_int32(iterations, 50,
    "The number of iterations to run.");

// A simple registry for caffe commands.
typedef int (*BrewFunction)();
typedef std::map<caffe::string, BrewFunction> BrewMap;
BrewMap g_brew_map;

#define RegisterBrewFunction(func) \
namespace { \
class __Registerer_##func { \
 public: /* NOLINT */ \
  __Registerer_##func() { \
    g_brew_map[#func] = &func; \
  } \
}; \
__Registerer_##func g_registerer_##func; \
}

static BrewFunction GetBrewFunction(const caffe::string& name) {
  if (g_brew_map.count(name)) {
    return g_brew_map[name];
  } else {
    LOG(ERROR) << "Available caffe actions:";
    for (BrewMap::iterator it = g_brew_map.begin();
         it != g_brew_map.end(); ++it) {
      LOG(ERROR) << "\t" << it->first;
    }
    LOG(FATAL) << "Unknown action: " << name;
    return NULL;  // not reachable, just to suppress old compiler warnings.
  }
}

// caffe commands to call by
//     caffe <command> <args>
//
// To add a command, define a function "int command()" and register it with
// RegisterBrewFunction(action);

// Device Query: show diagnostic information for a GPU device.
int device_query() {
  CHECK_GT(FLAGS_gpu, -1) << "Need a device ID to query.";
  LOG(INFO) << "Querying device ID = " << FLAGS_gpu;
  caffe::Caffe::SetDevice(FLAGS_gpu);
  caffe::Caffe::DeviceQuery();
  return 0;
}
RegisterBrewFunction(device_query);

// Load the weights from the specified caffemodel(s) into the train and
// test nets.
void CopyLayers(caffe::Solver<float>* solver, const std::string& model_list) {
  std::vector<std::string> model_names;
  boost::split(model_names, model_list, boost::is_any_of(",") );
  for (int i = 0; i < model_names.size(); ++i) {
    LOG(INFO) << "Finetuning from " << model_names[i];
    solver->net()->CopyTrainedLayersFrom(model_names[i]);
    for (int j = 0; j < solver->test_nets().size(); ++j) {
      solver->test_nets()[j]->CopyTrainedLayersFrom(model_names[i]);
    }
  }
}

// Train / Finetune a model.
int train() {
  CHECK_GT(FLAGS_solver.size(), 0) << "Need a solver definition to train.";
  CHECK(!FLAGS_snapshot.size() || !FLAGS_weights.size())
      << "Give a snapshot to resume training or weights to finetune "
      "but not both.";

  caffe::SolverParameter solver_param;
  caffe::ReadProtoFromTextFileOrDie(FLAGS_solver, &solver_param);

  // If the gpu flag is not provided, allow the mode and device to be set
  // in the solver prototxt.
  if (FLAGS_gpu < 0
      && solver_param.solver_mode() == caffe::SolverParameter_SolverMode_GPU) {
    FLAGS_gpu = solver_param.device_id();
  }

  // Set device id and mode
  if (FLAGS_gpu >= 0) {
    LOG(INFO) << "Use GPU with device ID " << FLAGS_gpu;
    Caffe::SetDevice(FLAGS_gpu);
    Caffe::set_mode(Caffe::GPU);
  } else {
    LOG(INFO) << "Use CPU.";
    Caffe::set_mode(Caffe::CPU);
  }

  LOG(INFO) << "Starting Optimization";
  shared_ptr<caffe::Solver<float> >
    solver(caffe::GetSolver<float>(solver_param));

  if (FLAGS_snapshot.size()) {
    LOG(INFO) << "Resuming from " << FLAGS_snapshot;
    solver->Solve(FLAGS_snapshot);
  } else if (FLAGS_weights.size()) {
    CopyLayers(&*solver, FLAGS_weights);
    solver->Solve();
  } else {
    solver->Solve();
  }
  LOG(INFO) << "Optimization Done.";
  return 0;
}
RegisterBrewFunction(train);


// Test: score a model.
int test() {
  CHECK_GT(FLAGS_model.size(), 0) << "Need a model definition to score.";
  CHECK_GT(FLAGS_weights.size(), 0) << "Need model weights to score.";

  // Set device id and mode
  if (FLAGS_gpu >= 0) {
    LOG(INFO) << "Use GPU with device ID " << FLAGS_gpu;
    Caffe::SetDevice(FLAGS_gpu);
    Caffe::set_mode(Caffe::GPU);
  } else {
    LOG(INFO) << "Use CPU.";
    Caffe::set_mode(Caffe::CPU);
  }
  // Instantiate the caffe net.
  Net<float> caffe_net(FLAGS_model, caffe::TEST);
  caffe_net.CopyTrainedLayersFrom(FLAGS_weights);
  LOG(INFO) << "Running for " << FLAGS_iterations << " iterations.";

  vector<Blob<float>* > bottom_vec;
  vector<int> test_score_output_id;
  vector<float> test_score;
  float loss = 0;
  for (int i = 0; i < FLAGS_iterations; ++i) {
    float iter_loss;
    const vector<Blob<float>*>& result =
        caffe_net.Forward(bottom_vec, &iter_loss);
    loss += iter_loss;
    int idx = 0;
    for (int j = 0; j < result.size(); ++j) {
      const float* result_vec = result[j]->cpu_data();
      for (int k = 0; k < result[j]->count(); ++k, ++idx) {
        const float score = result_vec[k];
        if (i == 0) {
          test_score.push_back(score);
          test_score_output_id.push_back(j);
        } else {
          test_score[idx] += score;
        }
        const std::string& output_name = caffe_net.blob_names()[
            caffe_net.output_blob_indices()[j]];
        LOG(INFO) << "Batch " << i << ", " << output_name << " = " << score;
      }
    }
  }
  loss /= FLAGS_iterations;
  LOG(INFO) << "Loss: " << loss;
  for (int i = 0; i < test_score.size(); ++i) {
    const std::string& output_name = caffe_net.blob_names()[
        caffe_net.output_blob_indices()[test_score_output_id[i]]];
    const float loss_weight =
        caffe_net.blob_loss_weights()[caffe_net.output_blob_indices()[i]];
    std::ostringstream loss_msg_stream;
    const float mean_score = test_score[i] / FLAGS_iterations;
    if (loss_weight) {
      loss_msg_stream << " (* " << loss_weight
                      << " = " << loss_weight * mean_score << " loss)";
    }
    LOG(INFO) << output_name << " = " << mean_score << loss_msg_stream.str();
  }

  return 0;
}
RegisterBrewFunction(test);

template <typename Dtype>
void CVImageVec2Blob(const vector<cv::Mat> &img_vec, Blob<Dtype> *dst_blob){
  CHECK_EQ(img_vec.size(), dst_blob->num());
  int num = dst_blob -> num();
  int height = dst_blob->height();
  int width = dst_blob->width();
  int img_channels = dst_blob->channels();
  bool do_mirror = false;
 
  // bool has_mean_file = false;
  // bool has_mean_values = false;
  
  Dtype *transformed_data = dst_blob->mutable_cpu_data();
  float scale = 1.0;
  for(int i =0; i < num; ++i){
    cv::Mat cv_cropped_img = img_vec[i];
    for (int h = 0; h < height; ++h) {
      const uchar* ptr = cv_cropped_img.ptr<uchar>(h);
      int img_index = 0;
      for (int w = 0; w < width; ++w) {
        for (int c = 0; c < img_channels; ++c) {
          int top_index = 0;
          if (do_mirror) {
            top_index = (c * height + h) * width + (width - 1 - w);
          } else {
            top_index = (c * height + h) * width + w;
          }
          // int top_index = (c * height + h) * width + w;
          Dtype pixel = static_cast<Dtype>(ptr[img_index++]);
          // if (has_mean_file) {
          //   int mean_index = (c * img_height + h_off + h) * img_width + w_off + w;
          //   transformed_data[top_index] =
          //     (pixel - mean[mean_index]) * scale;
          // } else {
            // if (has_mean_values) {
            //   transformed_data[top_index] =
            //     (pixel - mean_values_[c]) * scale;
            // } else {
          transformed_data[top_index] = pixel * scale;
            // }
          // }
        }
      }
    }
    transformed_data += dst_blob->offset(1); 
  }
}

std::queue<cv::Mat> video_frame_pool;
boost::mutex mutex; 



int show_result(){
  while(true){
    
    mutex.lock();
    if (!video_frame_pool.empty()){
      cv::Mat frame = video_frame_pool.front();
      video_frame_pool.pop();
      LOG(INFO) << "Pool size: " << video_frame_pool.size();
      cv::resize(frame,frame,cv::Size(frame.cols*4,frame.rows*4));
      cv::imshow("pose estimation: ", frame);
    }
    mutex.unlock();
    boost::this_thread::sleep(boost::posix_time::seconds(0.03));
    
  }
  return 0;
}
// Camera: show result from camera.
int process_frames() {
  CHECK_GT(FLAGS_model.size(), 0) << "Need a model definition to score.";
  CHECK_GT(FLAGS_weights.size(), 0) << "Need model weights to score.";

  // Set device id and mode
  if (FLAGS_gpu >= 0) {
    LOG(INFO) << "Use GPU with device ID " << FLAGS_gpu;
    Caffe::SetDevice(FLAGS_gpu);
    Caffe::set_mode(Caffe::GPU);
  } else {
    LOG(INFO) << "Use CPU.";
    Caffe::set_mode(Caffe::CPU);
  }
  // Instantiate the caffe net.
  Net<float> caffe_net(FLAGS_model, caffe::TEST);
  caffe_net.CopyTrainedLayersFrom(FLAGS_weights);
  // LOG(INFO) << "Running for " << FLAGS_iterations << " iterations.";
  
  vector<Blob<float>* > bottom_vec;
  
  
  int img_width = 192, img_height = 192;
  int batch_size = 5;
  const int radius = 2;

  const int thickness = 2;


  Blob<float> *data_blob = new Blob<float>();
  data_blob -> Reshape(batch_size,3,img_height, img_width);

  Blob<float> *aux_info_blob = new Blob<float>();
  aux_info_blob -> Reshape(batch_size,5,1,1);

  float *aux_data = aux_info_blob -> mutable_cpu_data();
  for(int i =0; i < batch_size; ++i) {
    aux_data[aux_info_blob->offset(i) + 0] = i;
    aux_data[aux_info_blob->offset(i) + 1] = img_width;
    aux_data[aux_info_blob->offset(i) + 2] = img_height;
    aux_data[aux_info_blob->offset(i) + 3] = 1.;
    aux_data[aux_info_blob->offset(i) + 4] = 0;
  }  

  vector<string> objidxs_ = vector<string>(batch_size,"0");
  vector<string> imgidxs_;
  string root_folder_ = "/home/lawrence/dongdk/img/";
  vector<string> images_paths_;
  string objindx = "0";
  int imgidx = 0;


  while(true){
    
    imgidxs_.clear();
    images_paths_.clear();
    bottom_vec.clear();

    cv::VideoCapture cap(0);
    if (!cap.isOpened()) {
      LOG(INFO) << "No camera found.";
      return -1;
    }
    
    // receive data from camera
    cv::Mat frame;
    std::vector<cv::Mat> img_vec;
    
    while(img_vec.size() < batch_size){
      cap >> frame;
      if (!frame.empty()){
        
        cv::resize(frame, frame, cv::Size(img_width, img_height));
        img_vec.push_back(frame);

        cv::waitKey(10);
        stringstream ss;
        ss << imgidx;
        imgidxs_.push_back(ss.str());

        images_paths_.push_back(root_folder_ + ss.str() + ".jpg");

        ++imgidx;
      }
    }
    caffe::GlobalVars::set_objidxs(objidxs_);
    caffe::GlobalVars::set_imgidxs(imgidxs_);
    caffe::GlobalVars::set_images_paths(images_paths_);

    // convert cv::Mat to blob
    CVImageVec2Blob(img_vec,data_blob);
    bottom_vec.push_back(data_blob);
    bottom_vec.push_back(aux_info_blob);

    float loss;
    // forward data
    caffe_net.Forward(bottom_vec, &loss);

    const vector<vector<Blob<float>*> > &top_vecs = caffe_net.top_vecs();

    
    const Blob<float> *pred_coord_blob = top_vecs[top_vecs.size() -1 ][0];

    
    int channels = pred_coord_blob -> channels();

    const float *pred_cood_data = pred_coord_blob -> cpu_data();
    for(int i =0; i < batch_size; ++i) {

      for(int c = 0; c < channels; c += 2){
        float x = pred_cood_data[pred_coord_blob -> offset(i) + c];        
        float y = pred_cood_data[pred_coord_blob -> offset(i) + c + 1];
        cv::Point p(x, y);
        cv::circle(img_vec[i], p, radius, cv::Scalar(216, 16, 216), thickness);
      }
      mutex.lock();
      video_frame_pool.push(img_vec[i]);
      mutex.unlock();
    }


  } 

  return 0;
}
int camera(){
    boost::thread process_thread(process_frames);
    sleep(2);
    boost::thread show_thread(show_result);
    
    process_thread.join();
    show_thread.join();
    return 0;

} 
RegisterBrewFunction(camera);




// Time: benchmark the execution time of a model.
int time() {
  CHECK_GT(FLAGS_model.size(), 0) << "Need a model definition to time.";

  // Set device id and mode
  if (FLAGS_gpu >= 0) {
    LOG(INFO) << "Use GPU with device ID " << FLAGS_gpu;
    Caffe::SetDevice(FLAGS_gpu);
    Caffe::set_mode(Caffe::GPU);
  } else {
    LOG(INFO) << "Use CPU.";
    Caffe::set_mode(Caffe::CPU);
  }
  // Instantiate the caffe net.
  Net<float> caffe_net(FLAGS_model, caffe::TRAIN);

  // Do a clean forward and backward pass, so that memory allocation are done
  // and future iterations will be more stable.
  LOG(INFO) << "Performing Forward";
  // Note that for the speed benchmark, we will assume that the network does
  // not take any input blobs.
  float initial_loss;
  caffe_net.Forward(vector<Blob<float>*>(), &initial_loss);
  LOG(INFO) << "Initial loss: " << initial_loss;
  LOG(INFO) << "Performing Backward";
  caffe_net.Backward();

  const vector<shared_ptr<Layer<float> > >& layers = caffe_net.layers();
  const vector<vector<Blob<float>*> >& bottom_vecs = caffe_net.bottom_vecs();
  const vector<vector<Blob<float>*> >& top_vecs = caffe_net.top_vecs();
  const vector<vector<bool> >& bottom_need_backward =
      caffe_net.bottom_need_backward();
  LOG(INFO) << "*** Benchmark begins ***";
  LOG(INFO) << "Testing for " << FLAGS_iterations << " iterations.";
  Timer total_timer;
  total_timer.Start();
  Timer forward_timer;
  Timer backward_timer;
  Timer timer;
  std::vector<double> forward_time_per_layer(layers.size(), 0.0);
  std::vector<double> backward_time_per_layer(layers.size(), 0.0);
  double forward_time = 0.0;
  double backward_time = 0.0;
  for (int j = 0; j < FLAGS_iterations; ++j) {
    Timer iter_timer;
    iter_timer.Start();
    forward_timer.Start();
    for (int i = 0; i < layers.size(); ++i) {
      timer.Start();
      // Although Reshape should be essentially free, we include it here
      // so that we will notice Reshape performance bugs.
      layers[i]->Reshape(bottom_vecs[i], top_vecs[i]);
      layers[i]->Forward(bottom_vecs[i], top_vecs[i]);
      forward_time_per_layer[i] += timer.MicroSeconds();
    }
    forward_time += forward_timer.MicroSeconds();
    backward_timer.Start();
    for (int i = layers.size() - 1; i >= 0; --i) {
      timer.Start();
      layers[i]->Backward(top_vecs[i], bottom_need_backward[i],
                          bottom_vecs[i]);
      backward_time_per_layer[i] += timer.MicroSeconds();
    }
    backward_time += backward_timer.MicroSeconds();
    LOG(INFO) << "Iteration: " << j + 1 << " forward-backward time: "
      << iter_timer.MilliSeconds() << " ms.";
  }
  LOG(INFO) << "Average time per layer: ";
  for (int i = 0; i < layers.size(); ++i) {
    const caffe::string& layername = layers[i]->layer_param().name();
    LOG(INFO) << std::setfill(' ') << std::setw(10) << layername <<
      "\tforward: " << forward_time_per_layer[i] / 1000 /
      FLAGS_iterations << " ms.";
    LOG(INFO) << std::setfill(' ') << std::setw(10) << layername  <<
      "\tbackward: " << backward_time_per_layer[i] / 1000 /
      FLAGS_iterations << " ms.";
  }
  total_timer.Stop();
  LOG(INFO) << "Average Forward pass: " << forward_time / 1000 /
    FLAGS_iterations << " ms.";
  LOG(INFO) << "Average Backward pass: " << backward_time / 1000 /
    FLAGS_iterations << " ms.";
  LOG(INFO) << "Average Forward-Backward: " << total_timer.MilliSeconds() /
    FLAGS_iterations << " ms.";
  LOG(INFO) << "Total Time: " << total_timer.MilliSeconds() << " ms.";
  LOG(INFO) << "*** Benchmark ends ***";
  return 0;
}
RegisterBrewFunction(time);

int main(int argc, char** argv) {
  #ifdef __unix__
   signal(SIGINT,quit_signal_handler); // listen for ctrl-C
  #endif

  // Print output to stderr (while still logging).
  FLAGS_alsologtostderr = 1;
  // Usage message.
  gflags::SetUsageMessage("command line brew\n"
      "usage: caffe <command> <args>\n\n"
      "commands:\n"
      "  train           train or finetune a model\n"
      "  test            score a model\n"
      "  device_query    show GPU diagnostic information\n"
      "  time            benchmark model execution time\n"
      "  camera          show result timely from camera");
  // Run tool or show usage.
  caffe::GlobalInit(&argc, &argv);
  if (argc == 2) {
    return GetBrewFunction(caffe::string(argv[1]))();
  } else {
    gflags::ShowUsageWithFlagsRestrict(argv[0], "tools/caffe");
  }

  if (quit_signal) exit(0); // exit cleanly on interrupt
}
