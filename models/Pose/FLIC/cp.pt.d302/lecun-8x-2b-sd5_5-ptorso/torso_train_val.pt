# ##############################
# @proto: train_val.prototxt
# @author: ddk
# @method: heat map
# @time: 16.01.03
# ##############################
name: "HumanPoseEstimation"

# ##############################
# data & mask & heat map
layer {
  name: "data"
  type: "RandomImageData2"
  top: "data_bank1"
  top: "gt_pose_coords"
  top: "aux_info"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    # opencv: B, G, R
  }
  random_image_data2_param {
    source: "../dataset/FLIC/labels/crop_train_labels2.txt"
    root_folder: "../dataset/FLIC/crop.images2/train/"
    label_num: 28
    batch_size: 12
    always_max_size: true
    is_scale_image: true
    shuffle: true
    max_size: 256
    min_size: 240
    is_color: true
    img_ext: ".jpg"
    parts_orders_path: "../dataset/FLIC/labels/parts_orders_path.txt"
  }
}

layer {
  name: "data"
  type: "RandomImageData2"
  top: "data_bank1"
  top: "gt_pose_coords"
  top: "aux_info"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    # opencv: B, G, R
  }
  random_image_data2_param {
    source: "../dataset/FLIC/labels/crop_test_labels2.txt"
    root_folder: "../dataset/FLIC/crop.images2/test/"
    label_num: 28
    batch_size: 8
    always_max_size: true
    is_scale_image: true
    shuffle: false
    max_size: 256
    min_size: 240
    is_color: true
    img_ext: ".jpg"
    parts_orders_path: "../dataset/FLIC/labels/parts_orders_path.txt"
  }
}

layer {
  name: "data_bank2"
  type: "Resize"
  bottom: "data_bank1"
  top: "data_bank2"
  resize_param {
    height_fac: 0.707
    width_fac: 0.707
  }
}

layer {
  name: "heat_maps_from_coords"
  type: "HeatMapsFromCoordsOrigin"
  bottom: "gt_pose_coords"
  bottom: "aux_info"
  top: "heat_maps"
  top: "heat_maps_masks"
  top: "heat_maps_infos"
  heat_maps_from_coords_origin_param {
    # 决定了heat map的pixels不为0的区域(菱形)的边长
    # radius: 10
    # radius_str: "2,2,2,6,6,4,6,6,4,6,6,6,6,6"
    is_binary: true
    gau_mean: 0
    gau_stds: 1.5
    radius_str: "3,3,3,8,8,6,8,8,6,8,8,8,8,8"
  }
}


# ##############################
# bank1
# conv & relu & pool & resize
layer {
  name: "conv1_bank1"
  type: "Convolution"
  bottom: "data_bank1"
  top: "conv1_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu1_bank1"
  type: "ReLU"
  bottom: "conv1_bank1"
  top: "conv1_bank1"
}

layer {
  name: "pool1_bank1"
  type: "Pooling"
  bottom: "conv1_bank1"
  top: "pool1_bank1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ########### conv2_bank1
layer {
  name: "conv2_bank1"
  type: "Convolution"
  bottom: "pool1_bank1"
  top: "conv2_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu2_bank1"
  type: "ReLU"
  bottom: "conv2_bank1"
  top: "conv2_bank1"
}

layer {
  name: "pool2_bank1"
  type: "Pooling"
  bottom: "conv2_bank1"
  top: "pool2_bank1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ########### conv3_bank1
layer {
  name: "conv3_bank1"
  type: "Convolution"
  bottom: "pool2_bank1"
  top: "conv3_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu3_bank1"
  type: "ReLU"
  bottom: "conv3_bank1"
  top: "conv3_bank1"
}

layer {
  name: "pool3_bank1"
  type: "Pooling"
  bottom: "conv3_bank1"
  top: "pool3_bank1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ########### conv4_1_bank1
layer {
  name: "conv4_1_bank1"
  type: "Convolution"
  bottom: "pool3_bank1"
  top: "conv4_1_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu4_1_bank1"
  type: "ReLU"
  bottom: "conv4_1_bank1"
  top: "conv4_1_bank1"
}

# ########### conv4_2_bank1
layer {
  name: "conv4_2_bank1"
  type: "Convolution"
  bottom: "conv4_1_bank1"
  top: "conv4_2_bank1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu4_2_bank1"
  type: "ReLU"
  bottom: "conv4_2_bank1"
  top: "conv4_2_bank1"
}

# ##############################
# bank2
# conv & relu & pool & resize
layer {
  name: "conv1_bank2"
  type: "Convolution"
  bottom: "data_bank2"
  top: "conv1_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu1_bank2"
  type: "ReLU"
  bottom: "conv1_bank2"
  top: "conv1_bank2"
}

layer {
  name: "pool1_bank2"
  type: "Pooling"
  bottom: "conv1_bank2"
  top: "pool1_bank2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ########### conv2_bank2
layer {
  name: "conv2_bank2"
  type: "Convolution"
  bottom: "pool1_bank2"
  top: "conv2_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu2_bank2"
  type: "ReLU"
  bottom: "conv2_bank2"
  top: "conv2_bank2"
}

layer {
  name: "pool2_bank2"
  type: "Pooling"
  bottom: "conv2_bank2"
  top: "pool2_bank2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ########### conv3_bank2
layer {
  name: "conv3_bank2"
  type: "Convolution"
  bottom: "pool2_bank2"
  top: "conv3_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu3_bank2"
  type: "ReLU"
  bottom: "conv3_bank2"
  top: "conv3_bank2"
}

layer {
  name: "pool3_bank2"
  type: "Pooling"
  bottom: "conv3_bank2"
  top: "pool3_bank2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ########### conv4_1_bank2
layer {
  name: "conv4_1_bank2"
  type: "Convolution"
  bottom: "pool3_bank2"
  top: "conv4_1_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu4_1_bank2"
  type: "ReLU"
  bottom: "conv4_1_bank2"
  top: "conv4_1_bank2"
}

# ########### conv4_2_bank2
layer {
  name: "conv4_2_bank2"
  type: "Convolution"
  bottom: "conv4_1_bank2"
  top: "conv4_2_bank2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu4_2_bank2"
  type: "ReLU"
  bottom: "conv4_2_bank2"
  top: "conv4_2_bank2"
}

layer {
  name: "re_conv4_2_bank2"
  type: "Resize"
  bottom: "conv4_2_bank2"
  bottom: "conv4_2_bank1"
  top: "re_conv4_2_bank2"
}

# ##############################
# merge
# conv & relu & pool & resize
layer {
  name: "merge_banks"
  type: "Eltwise"
  bottom: "conv4_2_bank1"
  bottom: "re_conv4_2_bank2"
  top: "conv4"
  eltwise_param {
    operation: SUM
  }
}

layer {
  name: "spatial_drop"
  type: "SpatialDropout"
  bottom: "conv4"
  top: "conv4"
  spatial_dropout_param {
    dropout_ratio: 0.5
  }
}

# ##############################
# torso predictor
# using roi-pooling and fc(s) to predict the torso bbox
layer {
  name: "scene_pool"
  type: "ScenePooling"
  bottom: "conv4"
  top: "scene_pool"
  scene_pooling_param {
    pooled_h: 7
    pooled_w: 7
  }
}

layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "scene_pool"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  loss_weight: 1
  include {
    phase: TRAIN
  }
}

# ##############################

layer {
  name: "visual_coords"
  type: "VisualizedPoseCoords"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "aux_info"
  include {
    phase: TEST
  }
  visual_pose_coords_param {
    coords_path: "../asserts/models/Pose/FLIC/cp.pt.d302/lecun-8x-2b-sd5_5-ptorso/poses_coords/"
    skel_path: "../dataset/FLIC/labels/skel_path.txt"
    coords_files_name: "files/"
    coords_images_name: "images/"
    # if bottom.size() == 1, only one of them, either `train/test` or `train, test, fusion` 
    # if bottom.size() == 3, then phase_name_size must be 3
    # else phase_name_size must be 1
    phase_name: "test_prediction/"
    phase_name: "test_ground_truths/"
    phase_name: "test_fusion/"
    is_draw_text: true
  }
}
