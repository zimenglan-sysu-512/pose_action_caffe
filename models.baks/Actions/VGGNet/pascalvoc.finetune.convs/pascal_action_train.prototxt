name: "ActionVGGNet"
# 
layer {
  name: 'data'
  type: 'Python'
  # 
  top: 'data'
  top: 'rois'
  top: 'labels'
  top: 'n_rois_count'
  # 
  python_param {
    module: 'action_roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 11"
  }
}


# 
# ############################################3
# 


layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


# 
# ############################################3
# 


layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


# 
# ############################################3
# 


layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


# 
# ############################################3
# 


layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}


# 
# ############################################3
# 


layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}


# 
# ############################################3
# 


layer {
  name: "roi_pool5"
  type: "ROIPooling"
  bottom: "conv5_3"
  bottom: "rois"
  top: "pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}


# 
# ######################################################################
#   split the primary and secondary regions proposals for input images

# top[0]: primary regions
# top[1]: corrsponding secondary region sets
layer {
  name: "extract_primary"
  type: "ExtractPrimary"
  # 
  bottom: "pool5"
  top: "primary_pool5"
  top: "secondary_pool5"
  # 
  extract_primary_param {
    # see fast_rcnn_dir/lib/fast_rcnn/config_action.py
    ims_per_batch: 2
  }
}


# 
# #################################################
#   Primary regions branch
layer {
  name: "primary_fc6"
  type: "InnerProduct"
  # 
  bottom: "primary_pool5"
  top: "primary_fc6"
  # 
  # used for initialization from pretrained model
  copy_postfix_name: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # 
  param {
    lr_mult: 2
    decay_mult: 0
  }
  # 
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "primary_relu6"
  type: "ReLU"
  # 
  bottom: "primary_fc6"
  top: "primary_fc6"
}
layer {
  name: "primary_drop6"
  type: "Dropout"
  # 
  bottom: "primary_fc6"
  top: "primary_fc6"
  # 
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "primary_fc7"
  type: "InnerProduct"
  # 
  bottom: "primary_fc6"
  top: "primary_fc7"
  # 
  # used for initialization from pretrained model
  copy_postfix_name: "fc7"
  # 
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  # 
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "primary_relu7"
  type: "ReLU"
  # 
  bottom: "primary_fc7"
  top: "primary_fc7"
}
layer {
  name: "primary_drop7"
  type: "Dropout"
  # 
  bottom: "primary_fc7"
  top: "primary_fc7"
  # 
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "primary_score"
  type: "InnerProduct"
  # 
  bottom: "primary_fc7"
  top: "primary_score"
  # 
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  # 
  inner_product_param {
    # determined by the actions dataset
    # pascal voc 2012: 11 (add background)
    num_output: 11
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


# 
# #################################################
#   Secondary regions branch
layer {
  name: "secondary_fc6"
  type: "InnerProduct"
  # 
  bottom: "secondary_pool5"
  top: "secondary_fc6"
  # 
  # used for initialization from pretrained model
  copy_postfix_name: "fc6"
  # 
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  # 
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "secondary_relu6"
  type: "ReLU"
  # 
  bottom: "secondary_fc6"
  top: "secondary_fc6"
}
layer {
  name: "secondary_drop6"
  type: "Dropout"
  # 
  bottom: "secondary_fc6"
  top: "secondary_fc6"
  # 
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "secondary_fc7"
  type: "InnerProduct"
  # 
  bottom: "secondary_fc6"
  top: "secondary_fc7"
  # 
  # used for initialization from pretrained model
  copy_postfix_name: "fc7"
  # 
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  # 
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "secondary_relu7"
  type: "ReLU"
  # 
  bottom: "secondary_fc7"
  top: "secondary_fc7"
}
layer {
  name: "secondary_drop7"
  type: "Dropout"
  # 
  bottom: "secondary_fc7"
  top: "secondary_fc7"
  # 
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "secondary_score"
  type: "InnerProduct"
  # 
  bottom: "secondary_fc7"
  top: "secondary_score"
  # 
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # 
  param {
    lr_mult: 2
    decay_mult: 0
  }
  # 
  inner_product_param {
    # determined by the actions dataset
    # pascal voc 2012: 11 (add background)
    num_output: 11
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


# 
# ####################################################
#   Merge secondary regions score by "MAX" operation
layer {
  name: "scondary_regions_op_scores"
  type: "SecondaryRegionsOpScores"
  # 
  bottom: "secondary_score"
  top: "secondary_max_score"
  # 
  # see fast_rcnn_dir/lib/fast_rcnn/config_action.py
  secondary_regions_op_scores_param {
    # where batch_num = (n_secondary_regions + 1) * ims_per_batch
    # n_secondary_regions: holds foreground and beground regions/proposals (ratio is 10:4)
    n_secondary_regions: 14
    op_scores: MAX
  }
}

#  CrossBlobsSumLayer
layer {
  name: "cross_blobs_sum"
  type: "CrossBlobsSum"
  # 
  bottom: "primary_score"
  bottom: "secondary_max_score"
  top: "cls_score"
}


# 
# #########################################
#   currently does not need bbox regression
# #########################################
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  # 
  bottom: "cls_score"
  bottom: "labels"
  top: "loss_cls"
  loss_weight: 1
}